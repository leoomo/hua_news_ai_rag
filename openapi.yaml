openapi: 3.0.3
info:
  title: 个性化新闻智能知识库 API
  version: 1.0.0
  description: 基于 Flask 的后端服务，支持知识库、检索、分析与配置。
servers:
  - url: http://localhost:5000
    description: 本地开发
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          example: 0
        msg:
          type: string
          example: ok
        data:
          type: object
    User:
      type: object
      properties:
        id: { type: integer }
        username: { type: string }
        email: { type: string }
        role: { type: string, enum: [user, editor, admin] }
        last_login: { type: string, format: date-time }
    Article:
      type: object
      properties:
        id: { type: integer }
        title: { type: string }
        content: { type: string }
        source_url: { type: string }
        source_name: { type: string }
        published_at: { type: string, format: date-time }
        category: { type: string }
        tags:
          type: array
          items: { type: string }
        status: { type: string, enum: [active, archived, deleted] }
        importance_score: { type: number, format: float }
    RssSource:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        url: { type: string }
        category: { type: string }
        is_active: { type: boolean }
        fetch_interval: { type: integer, description: seconds }
        last_fetch: { type: string, format: date-time }
    SearchResult:
      type: object
      properties:
        id: { type: string, description: 文档或分片ID }
        score: { type: number }
        title: { type: string }
        snippet: { type: string }
        source_url: { type: string }
        source_name: { type: string }
    QaAnswer:
      type: object
      properties:
        answer: { type: string }
        citations:
          type: array
          items:
            type: object
            properties:
              id: { type: string }
              title: { type: string }
              source_url: { type: string }
              snippet: { type: string }
paths:
  /api/auth/login:
    post:
      summary: 用户登录
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string }
                password: { type: string }
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer, example: 0 }
                  msg: { type: string, example: ok }
                  data:
                    type: object
                    properties:
                      token: { type: string }
  /api/auth/me:
    get:
      summary: 当前用户
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/kb/items:
    get:
      summary: 知识库列表
      parameters:
        - in: query
          name: type
          schema: { type: string }
        - in: query
          name: tag
          schema: { type: string }
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: size
          schema: { type: integer, default: 20 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer }
                  msg: { type: string }
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items: { $ref: '#/components/schemas/Article' }
                      total: { type: integer }
    post:
      summary: 批量入库（结构化数据）
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/Article'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/kb/items/{id}:
    patch:
      summary: 编辑元数据
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  items: { type: string }
                category: { type: string }
                importance_score: { type: number }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    delete:
      summary: 删除条目
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/settings/rss:
    get:
      summary: RSS 列表
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer }
                  msg: { type: string }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/RssSource' }
    post:
      summary: 新增 RSS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RssSource'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/settings/rss/{id}:
    patch:
      summary: 编辑 RSS
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RssSource'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    delete:
      summary: 删除 RSS
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/tasks/fetch_now:
    post:
      summary: 立即抓取
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/search/semantic:
    post:
      summary: 语义搜索（相似度检索+重排）
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [query]
              properties:
                query: { type: string }
                top_k: { type: integer, default: 5 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer }
                  msg: { type: string }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/SearchResult' }
  /api/search/qa:
    post:
      summary: RAG 问答（含引用）
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [query]
              properties:
                query: { type: string }
                top_k: { type: integer, default: 5 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer }
                  msg: { type: string }
                  data:
                    $ref: '#/components/schemas/QaAnswer'
  /api/search/fallback:
    post:
      summary: 未命中时的联网补充
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [query]
              properties:
                query: { type: string }
                top_k: { type: integer, default: 3 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/analytics/keywords:
    get:
      summary: 关键词 TopN
      parameters:
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
        - in: query
          name: top
          schema: { type: integer, default: 10 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/analytics/trends:
    get:
      summary: 趋势分析
      parameters:
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
        - in: query
          name: interval
          schema: { type: string, enum: [day, week, month], default: day }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/notify/test:
    post:
      summary: 发送测试邮件
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/settings/models:
    get:
      summary: 获取模型与配置
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    put:
      summary: 更新模型与配置
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                llm: { type: string, example: qwen2.5:3b }
                ollama_base_url: { type: string }
                embedding_model: { type: string, example: sentence-transformers/all-MiniLM-L6-v2 }
                rerank_model: { type: string, example: ms-marco-MiniLM-L-6-v2 }
                top_k: { type: integer, default: 5 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
